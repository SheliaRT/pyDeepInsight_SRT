import numpy as np

def _initial(benefit_matrix: np.ndarray, shuffle: bool = False): ...

def _row_swap_cost(benefit_matrix: np.ndarray, assignment: np.ndarray,
                   row_idx: int): ...

def _best_row_swap(benefit_matrix: np.ndarray, assignment: np.ndarray): ...

def _col_swap_cost(benefit_matrix: np.ndarray, assignment: np.ndarray,
                   row_idx: int): ...

def _best_col_swap(benefit_matrix: np.ndarray, assignment: np.ndarray): ...

def _row_swap(benefit_matrix: np.ndarray, assignment: np.ndarray,
              best_row: np.ndarray, br_benefit: np.ndarray,
              best_col: np.ndarray, bc_benefit: np.ndarray, r_idx: int): ...

def _col_swap(benefit_matrix: np.ndarray, assignment: np.ndarray,
              best_row: np.ndarray, br_benefit: np.ndarray,
              best_col: np.ndarray, bc_benefit: np.ndarray, r_idx: int): ...

def asymmetric_greedy_search(benefit_matrix: np.ndarray, shuffle: bool = False,
                             minimize: bool = False): ...
